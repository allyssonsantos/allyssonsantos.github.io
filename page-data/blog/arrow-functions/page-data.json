{
    "componentChunkName": "component---src-templates-blog-post-jsx",
    "path": "/blog/arrow-functions/",
    "result": {"data":{"site":{"siteMetadata":{"title":"allysson.me","author":"Allysson Santos"}},"mdx":{"id":"7c9153ab-6780-5b4a-b0bb-9c08d1c45002","excerpt":"Introdução Arrow function é uma nova forma de se escrever  funções anonimas , vamos\nentender sua sintaxe e como funciona o seu valor de  this . Sintaxe Uma…","frontmatter":{"title":"Arrow Functions","date":"18/12/2016","description":"Qual a diferença de arrow function para uma function \"padrão\"?","img":null},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Arrow Functions\",\n  \"slug\": \"/arrow-functions\",\n  \"description\": \"Qual a diferença de arrow function para uma function \\\"padrão\\\"?\",\n  \"date\": \"2016-12-18\",\n  \"tags\": [\"Javascript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Introdu\\xE7\\xE3o\"), mdx(\"p\", null, \"Arrow function \\xE9 uma nova forma de se escrever \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"fun\\xE7\\xF5es anonimas\"), \", vamos\\nentender sua sintaxe e como funciona o seu valor de \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"this\"), \".\"), mdx(\"h3\", null, \"Sintaxe\"), mdx(\"p\", null, \"Uma fun\\xE7\\xE3o anonima no ES5 era assim:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const countries = ['Germany', 'United States'];\\n\\nconst go = countries.map(function(country) {\\n  return 'One day I will go to ' + country;\\n});\\n\\nconsole.log(go);\\n\\n> [\\\"One day I will go to Germany\\\", \\\"One day I will go to United States\\\"]\\n\")), mdx(\"p\", null, \"Com as arrows functions, podemos simplifica-las das seguintes formas:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const contries = ['Germany', 'United States'];\\nconst go = countries.map(country => {\\n  return 'One day I will go to ' + country;\\n}); // Podemos tirar a palavra function e adicionar uma => a frente dos () dos parametros.\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const go = countries.map(country => {\\n  return 'One day I will go to ' + country;\\n}); // Caso a fun\\xE7\\xE3o tenha apenas um par\\xE2metro, podemos retirar o seus par\\xEAnteses.\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const go = countries.map(country => 'One day I will go to ' + country);\\n/* Caso a fun\\xE7\\xE3o tenha apenas um par\\xE2metro e retorne logo na primeira linha,\\npodemos escrever sem as chaves e sem a palavra return */\\n\\n/* Podemos usar tamb\\xE9m as template strings, ficando assim: */\\n\\nconst go = countries.map(country => `One day I will go to ${country}`);\\n\")), mdx(\"p\", null, \"Recapitulando:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Podemos tirar a palavra function e adicionar uma seta \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"=>\"), \" em frente os\\npar\\xEAnteses dos par\\xE2metros.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Se a sua fun\\xE7\\xE3o anonima tiver apenas um par\\xE2metro, pode \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"retirar\"), \" seus\\npar\\xEAnteses.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Se a fun\\xE7\\xE3o n\\xE3o tiver par\\xE2metros, podemos deixar \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"()\"), \" vazio mesmo.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Se a fun\\xE7\\xE3o der um \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"return\"), \" na primeira linha, podemos escrever apenas em uma\\nlinha, sem chaves e sem a palavra \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"return\"), \".\")), mdx(\"h3\", null, \"Objeto this\"), mdx(\"p\", null, \"O \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"this\"), \" dentro de uma \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"arrow function\"), \" se comporta de uma maneira\\ndiferente da que estamos acostumados, primeiro, vamos analisar um c\\xF3digo\\njs \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"sem uso de arrow functions\"), \".\"), mdx(\"p\", null, \"Imagine que temos o seguinte HTML e JS:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"<html>\\n  <body>\\n    <button id=\\\"btn\\\">Click!</button>\\n  </body>\\n  <script>\\n    const btn = document.getElementById('btn');\\n\\n    btn.addEventListener('click', function() {\\n      console.log(this);\\n    });\\n  </script>\\n</html>\\n\")), mdx(\"p\", null, \"Na fun\\xE7\\xE3o acima, ao clicar no bot\\xE3o com \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id='btn'\"), \" iremos logar o valor de\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"this\"), \", que nesse caso \\xE9 o pr\\xF3prio bot\\xE3o. Teremos como sa\\xEDda essa resposta:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"<button id=\\\"btn\\\">Click</button>\\n\")), mdx(\"p\", null, \"Se esse mesmo c\\xF3digo for escrito com \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"arrow function\"), \" o resultado n\\xE3o ser\\xE1 o\\nmesmo, pois o valor de \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"this\"), \" n\\xE3o est\\xE1 referenciado ao bot\\xE3o que est\\xE1\\nacontecendo a a\\xE7\\xE3o, ele est\\xE1 referenciado a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"todo o contexto\"), \" que a fun\\xE7\\xE3o\\nest\\xE1 inserida, no nosso caso, o contexto \\xE9 a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"window\"), \".\"), mdx(\"p\", null, \"Ao clicar no bot\\xE3o com uma \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"arrow function\"), \", teremos o seguinte retorno:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"<html>\\n  <body>\\n    <button id=\\\"btn\\\">Click!</button>\\n  </body>\\n  <script>\\n    const btn = document.getElementById('btn');\\n\\n    btn.addEventListener('click', () => {\\n      // mudan\\xE7a aqui /\\\\\\n      console.log(this);\\n    });\\n  </script>\\n</html>\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"> Window {speechSynthesis: SpeechSynthesis, caches: CacheStorage, localStorage: Storage\\n> sessionStorage: Storage, webkitStorageInfo: DeprecatedStorageInfo\\u2026}\\n\")), mdx(\"p\", null, \"Agora um outro exemplo para tentar fixar melhor, temos a seguinte estrutura sem\\no uso de arrow functions ainda:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"<html>\\n  <body>\\n    <button id=\\\"btn\\\">Click!</button>\\n  </body>\\n  <script>\\n    const pessoa = {\\n      nome: 'Allysson',\\n      idade: '22',\\n\\n      apresentar: function() {\\n        return `Meu nome e ${this.nome} e eu tenho ${this.idade} anos`;\\n      },\\n\\n      falar: function() {\\n        const self = this;\\n        window.setTimeout(function() {\\n          console.log(self.apresentar());\\n        }, 500);\\n      },\\n    };\\n\\n    const btn = document.getElementById('btn');\\n\\n    btn.addEventListener('click', function() {\\n      pessoa.falar();\\n    });\\n  </script>\\n</html>\\n\")), mdx(\"p\", null, \"Repare que na linha 15 precisamos \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"guardar o valor de this\"), \" na vari\\xE1vel \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"self\"), \"\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"(nesse moemento o valor de this \\xE9 o pr\\xF3prio objeto pessoa)\"), \", se us\\xE1ssemos\\ndiretamente o \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"this\"), \" dentro do \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"console.log\"), \" que est\\xE1 no \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setTimeout\"), \"\\nacabar\\xEDamos nos refer\\xEAnciando a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"window\"), \", e dentro da \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"window\"), \" n\\xE3o possu\\xEDmos\\na fun\\xE7\\xE3o falar, ela est\\xE1 dentro de \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pessoa\"), \".\"), mdx(\"p\", null, \"Executando esse JS temos o seguinte log no console:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"> Meu nome e Allysson e eu tenho 22 anos\\n\")), mdx(\"h4\", null, \"Usando arrow functions\"), mdx(\"p\", null, \"Agora se n\\xF3s mudarmos a fun\\xE7\\xE3o anonima que est\\xE1 dentro do \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setTimeout\"), \" para\\nutilizar \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"arrow function\"), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"n\\xE3o precisaremos guardar o valor de this\"), \" dentro\\nde \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"self\"), \", pois como \\xE9 uma \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"arrow function\"), \", o contexto de this j\\xE1 \\xE9 o objeto\\npessoa, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"o escopo se mant\\xE9m o mesmo\"), \"!\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"<html>\\n  <body>\\n    <button id=\\\"btn\\\">Click!</button>\\n  </body>\\n  <script>\\n    const pessoa = {\\n      nome: 'Allysson',\\n      idade: '22',\\n\\n      apresentar: function() {\\n        return `Meu nome e ${this.nome} e eu tenho ${this.idade} anos`;\\n      },\\n\\n      falar: function() {\\n        window.setTimeout(() => {\\n          console.log(this.apresentar());\\n        }, 500);\\n      },\\n    };\\n\\n    const btn = document.getElementById('btn');\\n\\n    btn.addEventListener('click', function() {\\n      pessoa.falar();\\n    });\\n  </script>\\n</html>\\n\")), mdx(\"p\", null, \"Temos como retorno o mesmo que na fun\\xE7\\xE3o anterior, mas agora \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"sem precisar do\\nself\"), \"!\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"> Meu nome e Allysson e eu tenho 22 anos\\n\")), mdx(\"h2\", null, \"Conclus\\xE3o\"), mdx(\"p\", null, \"O valor de this com arrow functions pode gerar grandes dores de cabe\\xE7a, esteja\\natento, fa\\xE7a testes, pratique criando fun\\xE7\\xF5es anonimas convencionais e logue o\\nvalor de this, fa\\xE7a essa mesma fun\\xE7\\xE3o utilizando arrow functions e compare o\\nvalor de this, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"saiba que o escopo se mantem o mesmo de onde a arrow function\\nfoi criada\"), \"!\"), mdx(\"p\", null, \"Ela \\xE9 muito boa para ocasi\\xF5es como no objeto pessoa, mas n\\xE3o parece ser muito\\ninteressante quando queremos adicionar um event listener em algum elemento, pois\\nestariamos alterando o escopo, o contexto. Nosso event listener n\\xE3o teria o\\nefeito desejado.\"));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"depth":2,"value":"Introdução"},{"depth":2,"value":"Conclusão"}]}},"pageContext":{"slug":"/arrow-functions/","previous":{"id":"1b1ef792-89ff-5408-9240-8a8b7692ad45","fields":{"slug":"/abertura-do-starwars-em-css/"},"frontmatter":{"title":"Abertura do StarWars em CSS.","published":null},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Abertura do StarWars em CSS.\",\n  \"slug\": \"/abertura-do-starwars-em-css\",\n  \"description\": \"Criando a abertura do filme starwars utilizando apenas html e css\",\n  \"date\": \"2016-07-25\",\n  \"tags\": [\"CSS\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Hoje vamos aprender a fazer a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"introdu\\xE7\\xE3o do Starwars\"), \" (o logo\\ndiminuindo e as letrinhas amarelas subindo)\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"utilizando apenas HTML e CSS\"), \", com direito a musiquinha!\"), mdx(\"h2\", null, \"O que vamos utilizar?\"), mdx(\"p\", null, \"Vamos utilizar os seguintes arquivos: o \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/starwars.svg\"\n  }, \"logo do starwars\"), \" e a\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/starwars.mp3\"\n  }, \"trilha sonora\"), \" da nossa abertura.\"), mdx(\"p\", null, \"E tamb\\xE9m utilizaremos as \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"seguintes t\\xE9cnicas\"), \":\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"box-shadow\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"transform:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"translate\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"scale\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"rotate\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"perspective\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"animation\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"keyframes\")), mdx(\"p\", null, \"Se voc\\xEA quiser saber mais sobre o transform, tem um post explicando algumas\\ncoisas sobre ele aqui:\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/transform-css3\"\n  }, \"Transform do CSS3 - O que \\xE9 possivel fazer?\")), mdx(\"h2\", null, \"Come\\xE7ando com o HTML\"), mdx(\"p\", null, \"A estrutura do nosso \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"HTML\"), \" ser\\xE1 bem b\\xE1sica, vamos come\\xE7ar com\\numa \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"div\"), \" vazia que ser\\xE1 a base para uma sombra\\nno topo de nossa pagina, para quando o texto atingir o topo de nossa p\\xE1gina,\\nele n\\xE3o desapare\\xE7a bruscamente. Vamos aproveitar e j\\xE1 linkar nosso futuro CSS\\ncom a tag \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"link\"), \", vamos importar nosso logo,\\ncriar uma \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"div\"), \" que ser\\xE1 nosso container, uma\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"div\"), \" que conter\\xE1 todos nossos t\\xEDtulos e\\npar\\xE1grafos e por fim, nossa tag \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"audio\"), \" que\\nimportaremos nossa m\\xFAsica.\"), mdx(\"p\", null, \"Nosso HTML fica assim:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <meta charset=\\\"UTF-8\\\" />\\n    <title>Starwars Intro</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"style.css\\\" />\\n  </head>\\n  <body>\\n    <div class=\\\"shadow\\\"></div>\\n    <img src=\\\"starwars.svg\\\" class=\\\"logo\\\" />\\n    <div class=\\\"container\\\">\\n      <div class=\\\"texto\\\">\\n        <h1 class=\\\"titulo\\\">Episode VII</h1>\\n        <h2 class=\\\"subtitulo\\\">The force awakens</h2>\\n        <p>\\n          It is a time of hope for the restored Republic. The last Imperial\\n          loyalists have been pushed back to the Outer Rim Territories.\\n        </p>\\n        <p>\\n          Chased across the galaxy by the Republic, the last remnants of the\\n          Galactic Empire have started raiding outposts in the outlying systems,\\n          desperate to replenish their dwindling supplies.\\n        </p>\\n        <p>\\n          With a large Republic fleet closing in on their position, the\\n          Imperials gather above the Outer Rim world of Tatooine, ready to make\\n          their last stand...\\n        </p>\\n      </div>\\n    </div>\\n    <audio autoplay>\\n      <source src=\\\"starwars.mp3\\\" type=\\\"audio/mpeg\\\" />\\n    </audio>\\n  </body>\\n</html>\\n\")), mdx(\"h2\", null, \"Come\\xE7ando com o CSS!\"), mdx(\"p\", null, \"Vamos come\\xE7ar estilizando nosso \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".container\"), \",\\ndando a ele uma \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"largura m\\xE1xima\"), \" de 1000px, centralizando na\\np\\xE1gina e um \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"position: relative\"), \" que servir\\xE1\\npara alinharmos nosso logo futuramente.\"), mdx(\"p\", null, \"Agora vamos estilizar o \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"body\"), \" adicionando a cor\\npreta ao fundo, colocar um\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"overflow: hidden\"), \" para sumir com as scrollbars\\ne no meu caso, vou utilizar a fonte Helvetica em todos os textos e com a cor\\namarela (\", mdx(\"abbr\", {\n    title: \"Hexadecimal de uma cor com tom amarelado\"\n  }, \"#F2CB06\"), \").\\nAt\\xE9 agora, nosso css est\\xE1 assim:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-css\"\n  }, \"* {\\n  /* Vamos fazer um reset do padding e margin. */\\n  padding: 0;\\n  margin: 0;\\n}\\nbody {\\n  background: #000;\\n  color: #f2cb06;\\n  font-family: 'Helvetica-neue', 'Helvetica', sans-serif;\\n  overflow: hidden;\\n}\\n.container {\\n  max-width: 1000px;\\n  margin: 0 auto;\\n  position: relative;\\n}\\n\")), mdx(\"p\", null, \"Hora de estilizar a nossa \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"div\"), \" que ser\\xE1 a base\\npara nossa \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"sombra\"), \". vamos dar uma altura de 100\", mdx(\"abbr\", {\n    title: \"pixels\"\n  }, \"px\"), \"\\n, a cor da div e da sombra ser\\xE1 a mesma cor do fundo, vamos dar um position\\nrelative para poder setar um z-index maior para que todos os elementos passem\\npor de baixo de nossa sombra.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-css\"\n  }, \".shadow {\\n  height: 100px;\\n  background-color: #000;\\n  box-shadow: 0px 10px 20px #000;\\n  position: relative;\\n  z-index: 100;\\n}\\n\")), mdx(\"p\", null, \"O motivo de colocarmos essa sombra, \\xE9 pra dar um efeito legal, veja o exemplo:\"), mdx(\"figure\", null, mdx(\"img\", {\n    src: \"/exemplo.png\",\n    alt: \"Exemplo da sombra\"\n  }), mdx(\"figcaption\", null, \"1. Exemplo da sombra sendo aplicada, e nosso texto sumindo suavemente.\")), mdx(\"h3\", null, \"Animando o logo!\"), mdx(\"p\", null, \"Agora sim come\\xE7a a m\\xE1gica, vamos \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"adicionar nossas anima\\xE7\\xF5es\"), \".\\nPrimeiro precisamos adicionar o estilo do nosso logo, precisamos definir um\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"transform: scale(0)\"), \" para que quando a anima\\xE7\\xE3o\\ntermine, ele continue com o tamanho 0, e assim, n\\xE3o fique vis\\xEDvel. E tamb\\xE9m o\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"translate(-50%, -50%)\"), \" e um\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"position: absolute;\"), \" para alinhar-mos o logo no\\ncentro da p\\xE1gina.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-css\"\n  }, \".logo {\\n  position: absolute;\\n  top: 50%;\\n  left: 50%;\\n  transform: scale(0) translate(-50%, -50%);\\n}\\n\")), mdx(\"p\", null, \"Agora vamos \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"dar um nome para a nossa anima\\xE7\\xE3o\"), \" do logo\\nutilizando a propriedade\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"animation-name: logo;\"), \" vamos determinar a\\ndura\\xE7\\xE3o da nossa anima\\xE7\\xE3o, ela ter\\xE1 15 segundos\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"animation-duration: 15s;\"), \" e determinar que ela\\nser\\xE1 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"linear\"), \", ou seja, ter\\xE1 a mesma velocidade do come\\xE7o ao\\nfim. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"animation-timing-function: linear;\")), mdx(\"p\", null, \"Podemos adicionar os prefixos \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-webkit-\"), \" e\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-moz-\"), \" por quest\\xF5es de compatibilidade entre os\\nnavegadores.\"), mdx(\"p\", null, \"Nosso css est\\xE1 assim:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-css\"\n  }, \".logo {\\n  position: absolute;\\n  top: 50%;\\n  left: 50%;\\n  -webkit-transform: scale(0) translate(-50%, -50%);\\n  -moz-transform: scale(0) translate(-50%, -50%);\\n  transform: scale(0) translate(-50%, -50%);\\n  -webkit-animation-name: logo;\\n  -webkit-animation-duration: 15s;\\n  -webkit-animation-timing-function: linear;\\n  -moz-animation-name: logo;\\n  -moz-animation-duration: 15s;\\n  -moz-animation-timing-function: linear;\\n  animation-name: logo;\\n  animation-duration: 15s;\\n  animation-timing-function: linear;\\n}\\n\")), mdx(\"p\", null, \"At\\xE9 agora, nada acontece, precisamos adicionar nossos\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"keyframes!\"), \" a sintaxe \\xE9 a seguinte,\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@keyframes nome_da_anima\\xE7\\xE3o\"), \" que foi definido\\nno \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"animation-name\")), mdx(\"p\", null, \"Vamos utilizar as\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"propriedades\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"from\"), \" e\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"to\"), \" que ser\\xE3o declaradas dentro de nosso keyframe, onde determinamos quais\\npropriedades e valores que come\\xE7am no segundo 0 (from) de nossa anima\\xE7\\xE3o, e como\\nessas propriedades e valores \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ir\\xE3o estar no t\\xE9rmino da nossa anima\\xE7\\xE3o\"), \", no\\ncaso, no segundo 15 (to).\"), mdx(\"p\", null, \"Vamos estilizar dentro do nosso \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"from {\"), \", ou\\nseja, as propriedades definidas dentro dele, ser\\xE3o as propriedades iniciais de\\nnossa anima\\xE7\\xE3o. Vamos come\\xE7ar com nosso logo tendo 2x o seu tamanho original,\\nou seja, um \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"scale(2)\"), \".\"), mdx(\"p\", null, \"Agora o estilo dentro do \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"to {\"), \" que ser\\xE3o as\\npropriedades finais de nossa anima\\xE7\\xE3o, ou seja, como nosso logo estar\\xE1 no\\nfinal. O tamanho dele ser\\xE1 0, ou seja, ele vai diminuir at\\xE9 sumir!\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"scale(0);\"), \".\"), mdx(\"p\", null, \"Nosso keyframe no CSS, ficar\\xE1 assim (utilize os prefixos para compatibilidade,\\nn\\xE3o utilizarei para poupar c\\xF3digo):\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-css\"\n  }, \"@keyframes logo {\\n  from {\\n    transform: translate(-50%, -50%) scale(2);\\n    /* Precisamos repetir o translate, pois o keyframe sobescreve os valores da propriedade */\\n  }\\n  to {\\n    transform: translate(-50%, -50%) scale(0);\\n  }\\n}\\n\")), mdx(\"p\", null, \"Veja um exemplo de como est\\xE1 nossa anima\\xE7\\xE3o at\\xE9 agora:\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/starwars/starwars-exemplo-1\"\n  }, \"Exemplo\")), mdx(\"h3\", null, \"Animando o texto\"), mdx(\"p\", null, \"Primeiramente precisamos dar \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"estilo para o nosso texto\"), \",\\ncome\\xE7amos adicionando o b\\xE1sico, alinhamos todo nosso texto ao centro,\\nalteramos os nossos par\\xE1grafos para fonte de 70\", mdx(\"abbr\", {\n    title: \"pixels\"\n  }, \"px\"), \",\\nnegrito, e uma \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"margin-top\"), \" de 70\", mdx(\"abbr\", {\n    title: \"pixels\"\n  }, \"px\"), \" para distanciar\\nde nosso t\\xEDtulo.\"), mdx(\"p\", null, \"Para o t\\xEDtulo vamos apenas aumentar a fonte para\\n85\", mdx(\"abbr\", {\n    title: \"pixels\"\n  }, \"px\"), \" e para nosso subt\\xEDtulo vamos deixar ele com o\\npeso da fonte \\u201Cnormal\\u201D, alterar a altura das linhas e deixar tudo em caixa alta.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-css\"\n  }, \".texto {\\n  text-align: center;\\n}\\n.texto p {\\n  font-size: 70px;\\n  font-weight: bold;\\n  text-shadow: 0px 0px 10px #000;\\n  margin-top: 70px;\\n  line-height: 1.4;\\n}\\n.titulo {\\n  font-size: 85px;\\n}\\n.subtitulo {\\n  font-weight: normal;\\n  text-transform: uppercase;\\n}\\n\")), mdx(\"p\", null, \"Agora come\\xE7amos com a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"nossa anima\\xE7\\xE3o\"), \", primeira novidade,\\nvamos adicionar uma \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"perspectiva\"), \" ao nosso texto! ou seja,\\nvamos \\u201Cdistanciar\\u201D nosso par\\xE1grafo 800\", mdx(\"abbr\", {\n    title: \"pixels\"\n  }, \"px\"), \" da tela!\\nassim podemos dar uma \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"sensa\\xE7\\xE3o de profundidade\"), \" ao nosso\\nelemento. Vamos tamb\\xE9m rotacionar nosso elemento no eixo X em 25 graus. O\\nestilo do nosso texto fica assim:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-css\"\n  }, \".texto {\\n  text-align: center;\\n  transform: perspective(800px) rotateX(25deg);\\n}\\n\")), mdx(\"figure\", null, mdx(\"img\", {\n    src: \"/exemplo2.png\",\n    alt: \"Exemplo de texto rotacionado\"\n  }), mdx(\"figcaption\", null, \"2. Exemplo do texto com profundidade e rotacionado 25 graus no eixo X.\")), mdx(\"p\", null, \"Por\\xE9m, no come\\xE7o da nossa anima\\xE7\\xE3o\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"apenas o logo deve estar vis\\xEDvel\"), \", nosso texto s\\xF3 come\\xE7ar\\xE1 a\\nser exibido quando o logo estiver quase sumido completamente, para isso, temos\\nque \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"esconder nosso texto\"), \", podemos desloca-lo utilizando o\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"translateY()\"), \", isso far\\xE1 nosso texto deslocar para baixo e\\nficar fora da p\\xE1gina, para depois subir dando aquele efeito legal!\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-css\"\n  }, \".texto {\\n  text-align: center;\\n  transform: perspective(800px) rotateX(25deg) translateY(40%);\\n}\\n\")), mdx(\"p\", null, \"Vamos come\\xE7ar com nossas anima\\xE7\\xF5es, come\\xE7amos adicionando nosso\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"animation-name: subir;\"), \",\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"animation-duration: 60s;\"), \",\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"animation-timing-function: linear;\"), \", at\\xE9 aqui,\\nnada de novo, nossa anima\\xE7\\xE3o se chama \\u201Csubir\\u201D (vamos utilizar esse nome no\\nkeyframe), ter\\xE1 60 segundos de dura\\xE7\\xE3o e sua velocidade ser\\xE1 linear, ou seja,\\na mesma velocidade durante a anima\\xE7\\xE3o inteira. (Adicione os prefixos para\\ncompatibilidade nos browsers).\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-css\"\n  }, \".texto {\\n  text-align: center;\\n  transform: perspective(800px) rotateX(25deg) translateY(40%);\\n  animation-name: subir;\\n  animation-duration: 60s;\\n  animation-timing-function: linear;\\n}\\n\")), mdx(\"p\", null, \"Agora vamos ao nosso \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"keyframe\"), \", ao inv\\xE9s de utilizar o\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"from {\"), \" e o\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"to {\"), \", vamos utilizar\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"porcentagens\"), \", vamos iniciar nossa anima\\xE7\\xE3o apenas quando a\\nanima\\xE7\\xE3o do logo estiver quase terminando, ou seja, vamos esperar um tempo\\npara nossa anima\\xE7\\xE3o do texto come\\xE7ar. Vamos iniciar em 15% e vamos at\\xE9 100%,\\nvamos esperar cerca de 9 segundos (15% de 60s) para iniciar a anima\\xE7\\xE3o do\\ntexto. Nesse keyframe vamos alterar apenas o translateY(), passando um valor\\nnegativo para nosso texto subir!\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-css\"\n  }, \"@keyframes subir {\\n  15% {\\n    transform: perspective(800px) rotateX(25deg) translateY(40%);\\n    /* Precisamos repertir a perspective e o rotate para manter a perspectiva e rota\\xE7\\xE3o. */\\n  }\\n  100% {\\n    transform: perspective(800px) rotateX(25deg) translateY(-220%);\\n    /* O translate -220% serve para deslocar o texto para cima! dando a sensa\\xE7\\xE3o de que o texto est\\xE1 subindo. */\\n  }\\n}\\n\")), mdx(\"p\", null, \"E est\\xE1 pronto nosso starwars!\"), mdx(\"a\", {\n    href: \"/starwars/starwars-exemplo-2\",\n    title: \"Exemplo da anima\\xE7\\xE3o final\"\n  }, \"Exemplo da anima\\xE7\\xE3o final\"), \".\", mdx(\"p\", null, \"Caso voc\\xEA queira colocar um outro texto, alterar tamanho da fonte, \\xE9 bem\\nprov\\xE1vel que voc\\xEA tenha que fazer altera\\xE7\\xF5es no rotate ou na perspectiva, fique\\natento!\"), mdx(\"p\", null, \"E segue o desafio de algu\\xE9m adaptar para funcionar bacana no mobile!\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"next":{"id":"d2ba23c5-2015-567a-b916-56fab03d40b4","fields":{"slug":"/critical-rendering-path/"},"frontmatter":{"title":"Critical rendering path - Renderização no browser.","published":null},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Critical rendering path - Renderização no browser.\",\n  \"slug\": \"/critical-rendering-path\",\n  \"description\": \"Como o browser renderiza? quais os passos que ele segue até exibir a página na tela?\",\n  \"date\": \"2017-06-17\",\n  \"tags\": [\"Web\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Caminho cr\\xEDtico de renderiza\\xE7\\xE3o\"), mdx(\"p\", null, \"O caminho cr\\xEDtico de renderiza\\xE7\\xE3o \\xE9 a sequ\\xEAncia de etapas que o navegador executa para converter o HTML, CSS e Javascript em pixels na tela.\\nVamos conhecer essas etapas e como podemos renderizar as nossas p\\xE1ginas mais r\\xE1pido.\"), mdx(\"p\", null, \"As etapas que o browser realiza para renderizar nossa p\\xE1gina s\\xE3o:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Pegar o HTML e come\\xE7ar a criar o Document Object Model. (DOM)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Extrair o CSS e criar o Css Object Model (CSSOM)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Combinar o DOM e CSSOM para criar a \\xE1rvore de renderiza\\xE7\\xE3o. (Rendering tree)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Descobrir onde tudo se encaixa na p\\xE1gina (Layout)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Pintar os pixels na tela (Paint)\")), mdx(\"p\", null, \"Tamb\\xE9m temos a etapa de como o browser lida com o javascript, falaremos sobre isso mais \\xE0 frente.\"), mdx(\"h2\", null, \"Convertendo HTML para DOM\"), mdx(\"p\", null, \"Quando acessamos uma p\\xE1gina da web, o browser recebe a resposta da nossa requisi\\xE7\\xE3o (conte\\xFAdo HTML) e transforma em pixels, vamos descobrir como isso \\xE9 feito.\"), mdx(\"p\", null, \"A especifica\\xE7\\xE3o do \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HTML\"), \" possui uma s\\xE9rie de regras sobre como o browser deve processar o conte\\xFAdo recebido, por exemplo, o texto contido entre sinais de menor \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<\"), \" e maior \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \">\"), \" possui um significado especial no \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HTML\"), \", isso deve ser considerado uma \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TAG\"), \", como resultado, toda vez que o browser encontra uma \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TAG\"), \" ele emite um \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Token\"), \", vejamos um exemplo:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"<html>\\n  <head>\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width\\\" />\\n    <link href=\\\"style.css\\\" rel=\\\"stylesheet\\\" />\\n\\n    ...\\n  </head>\\n</html>\\n\")), mdx(\"p\", null, \"Ap\\xF3s o browser receber o nosso html ele analisa a primeira \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"TAG\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<html>\"), \" e emite um token, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"existem dois tipos\"), \" de \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tokens\"), \" o \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"StartTag\"), \" e o \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"EndTag\"), \", nesse caso, o primeiro token \\xE9 o \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"StartTag: HTML\"), \", o segundo \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"StartTag: head\"), \" e assim por diante. Esse processo inteiro \\xE9 feito pelo \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"tokenizer\"), \" e enquanto o \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"tokenizer\"), \" est\\xE1 fazendo esse trabalho, existe outro processo que est\\xE1 consumindo esses tokens e convertendo em \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Node Objects\"), \". Por exemplo: o browser converte o primeiro token \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"StartTag: HTML\"), \" e cria o \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HTML Node\"), \", depois consome o p\\u0155oximo token e cria o \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"node\"), \" correspondente. Perceba que o \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"tokenizer\"), \" emite \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Start\"), \" e \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"End\"), \" tokens, que nos mostra a rela\\xE7\\xE3o entre os n\\xF3s (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nodes\"), \"). O token \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"StartTag: head\"), \" vem antes do token \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"EndTag: HTML\"), \" o que nos diz que o token head \\xE9 um filho do token html, nessa l\\xF3gica, vemos que o node da tag \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"meta\"), \" e o node da tag \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"link\"), \" s\\xE3o filhos de head, e assim por diante.\"), mdx(\"p\", null, \"Veja um esquema desse processo aplicado \\xE0 uma p\\xE1gina web simples:\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/processo-crp.png\",\n    \"alt\": \"Processo do Critical Rendering Path\",\n    \"title\": \"Processo do Critical Rendering Path\"\n  })), mdx(\"p\", null, \"Depois de consumido todos os tokens e todos os nodes criados, chegamos ao DOM, que \\xE9 a estrutura em \\xE1rvore que captura o conte\\xFAdo e propriedades do HTML e todas suas rela\\xE7\\xF5es entre os nodes.\"), mdx(\"p\", null, \"No \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"DevTools\"), \" do navegador \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Google Chrome\"), \" existe uma aba chamada \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Performance\"), \" nela \\xE9 poss\\xEDvel consultar o tempo necess\\xE1rio que o browser levou para executar todo esse processo que vimos acima:\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/timeline.png\",\n    \"alt\": \"Timeline\",\n    \"title\": \"Timeline do Google Chrome exibindo o tempo de parse do HTML\"\n  })), mdx(\"p\", null, \"O browser constr\\xF3i o DOM incrementalmente, e n\\xF3s podemos tirar vantagem disso e aumentar a velocidade da renderiza\\xE7\\xE3o. Um exemplo \\xE9 como a p\\xE1gina de resultados do Google trabalha, assim que voc\\xEA est\\xE1 digitando o que quer procurar o servidor do google j\\xE1 entrega o header da p\\xE1gina, que \\xE9 igual para todos os usu\\xE1rios, assim, quando voc\\xEA terminar de escrever o que deseja buscar, o servidor envia os dados em HTML e o browser incrementa o DOM com os resultados. Como voc\\xEA pode notar, o servidor do google n\\xE3o precisa esperar que voc\\xEA envie o que deseja buscar para retornar o HTML completo para o browser processar tudo de uma vez, ele come\\xE7a com o header da p\\xE1gina, e incrementalmente devolve o resultado da sua busca. Portanto, entregar HTML em parcelas \\xE9 algo muito bom!\"), mdx(\"h2\", null, \"CSSOM - Convertendo CSS em CSS Object Model\"), mdx(\"p\", null, \"Bom, o DOM captura o conte\\xFAdo da p\\xE1gina, mas n\\xF3s tamb\\xE9m precisamos saber como exibi-la e onde encaixar as coisas, e para isso, o browser precisa criar o \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"CSS Object Model\"), \", o CSSOM \\xE9 bem parecido com o DOM, por\\xE9m, DOM e CSSOM s\\xE3o estruturas independentes! Vejamos:\"), mdx(\"p\", null, \"Quando o navegador est\\xE1 construindo o DOM e encontra uma tag \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"link\"), \" que referencia alguma folha de estilo CSS ele prev\\xEA que esse recurso \\xE9 necess\\xE1rio para renderizar a p\\xE1gina e envia imediatamente uma requisi\\xE7\\xE3o para esse arquivo, segue um exemplo do que essa folha de estilos pode retornar:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-css\"\n  }, \"body {\\n  font-size: 16px;\\n}\\np {\\n  font-weight: bold;\\n}\\nspan {\\n  color: red;\\n}\\np span {\\n  display: none;\\n}\\nimg {\\n  float: right;\\n}\\n\")), mdx(\"p\", null, \"Assim como o \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"HTML\"), \" o navegador precisa converter as regras \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"CSS\"), \" em algo que ele consiga entender e utilizar. Portanto, o processo feito no HTML \\xE9 repetido, s\\xF3 que dessa vez, para o CSS.\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/construcao-cssom.png\",\n    \"alt\": \"CSSOM\",\n    \"title\": \"Contrução do CSSOM\"\n  })), mdx(\"p\", null, \"Como vemos, segue o mesmo padr\\xE3o utilizado no HTML, s\\xF3 que ao inv\\xE9s de criar a estrutura do DOM, \\xE9 criada a estrutura do CSSOM.\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/arvore-cssom.png\",\n    \"alt\": \"Árvore CSSOM\",\n    \"title\": \"Árvore CSSOM\"\n  })), mdx(\"p\", null, \"Com o esquema acima, conseguimos entender o porque o CSS \\xE9 aplicado em cascata. O estilo aplicado ao elemento \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"body\"), \" \\xE9 herdado por todos os seus filhos, analisando a \\xE1rvore CSS acima, todo texto dentro do elemento \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"span\"), \" ter\\xE1 fonte tamanho 16 pixels (estilo herdado do elemento \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"body\"), \") e a cor vermelha (estilo espec\\xEDfico para o elemento \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"span\"), \").\"), mdx(\"p\", null, \"H\\xE1 um detalhe muito importante, todo navegador possui um conjunto de regras CSS padr\\xF5es, conhecidos tamb\\xE9m por \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"estilos de user-agent\"), \" (por exemplo \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://www.iecss.com/\",\n    \"title\": \"Estilos padrões do Internet Explorer\"\n  }, \"estilos padr\\xF5es do Internet Explorer\"), \")\"), mdx(\"p\", null, \"Assim como \\xE9 poss\\xEDvel descobrir o tempo necess\\xE1rio para o \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"parse\"), \" do HTML, tamb\\xE9m \\xE9 poss\\xEDvel verificar o tempo necess\\xE1rio para o processamento do CSS atrav\\xE9s do DevTools:\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/cssom-timeline.png\",\n    \"alt\": \"Timeline do CSSOM\",\n    \"title\": \"Timeline do CSSOM\"\n  })), mdx(\"p\", null, \"\\xC9 poss\\xEDvel analisar o tempo decorrido e tamb\\xE9m quantos elementos foram afetados. Com isso, podemos concluir que escrever um \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"CSS de qualidade\"), \", com \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"seletores espec\\xEDficos\"), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"evitar sobreescritas\"), \" e \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"evitar \", mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"!important\")), \" \\xE9 de grande import\\xE2ncia, devemos afetar apenas os elementos corretos para diminuir o tempo necess\\xE1rio de processamento do CSSOM.\"), mdx(\"p\", null, \"At\\xE9 aqui vimos a constru\\xE7\\xE3o dos modelos de objetos, criamos as \\xE1rvores do DOM e do CSSOM. No entanto, ambos s\\xE3o objetos independentes: um descreve o conte\\xFAdo e o outro, as regras de estilos que devem ser aplicadas ao documento. Para entender a mescla entre o DOM e o CSSOM precisamos conhecer a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"\\xE1rvore de renderiza\\xE7\\xE3o\")), mdx(\"h2\", null, \"\\xC1rvore de renderiza\\xE7\\xE3o\"), mdx(\"p\", null, \"A primeira tarefa que o browser efetua quando est\\xE1 nessa fase \\xE9 a combina\\xE7\\xE3o do DOM e CSSOM em uma \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"\\xE1rvore de renderiza\\xE7\\xE3o\"), \" que cont\\xE9m todo conte\\xFAdo \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"vis\\xEDvel\"), \" do DOM e todas regras de \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"CSS\"), \" do \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"CSSOM\"), \" de cada n\\xF3.\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/arvore-de-renderizacao.png\",\n    \"alt\": \"Árvore de renderização\",\n    \"title\": \"Árvore de renderização\"\n  }), \"\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Exemlo de uma \\xE1rvore de renderiza\\xE7\\xE3o\")), mdx(\"p\", null, \"As demais tarefas s\\xE3o as seguintes:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"A partir do come\\xE7o do DOM, percorre cada elemento (n\\xF3) vis\\xEDvel.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Para cada n\\xF3 vis\\xEDvel \\xE9 encontrada e aplicada a sua regra do CSS correspondente.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Por fim, retorna os n\\xF3s vis\\xEDveis e seus estilos aplicados.\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Alguns elementos n\\xE3o s\\xE3o vis\\xEDveis, como \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"head\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"script\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"meta\"), \", etc, e s\\xE3o omitidos pois n\\xE3o s\\xE3o refletidos no resultado da renderiza\\xE7\\xE3o.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Os elementos que forem ocultados via \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"CSS\"), \" tamb\\xE9m s\\xE3o omitidos no resultado da renderiza\\xE7\\xE3o, no exemplo acima, uma das tags \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"span\"), \" est\\xE1 omitida, porque existe uma regra \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"CSS\"), \" que define a propriedade \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"display: none\"), \".\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Observa\\xE7\\xE3o:\"), \" a regra CSS \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"visibility: hidden\"), \" \\xE9 diferente da regra \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"display: none\"), \". A primeira torna o elemento \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"invis\\xEDvel\"), \", o elemento ainda ocupa o seu espa\\xE7o no layout, ou seja, \\xE9 renderizado como uma caixa vazia. O segundo remove completamente o elemento da \\xE1rvore de renderiza\\xE7\\xE3o, o elemento fica invis\\xEDvel e \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"n\\xE3o faz parte do layout\"), \".\"), mdx(\"p\", null, \"Por fim, temos o resultado da renderiza\\xE7\\xE3o com o conte\\xFAdo e toda informa\\xE7\\xE3o de estilo do conte\\xFAdo vis\\xEDvel na tela. Podemos passar para fase de \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"layout\"), \".\"), mdx(\"h3\", null, \"Layout\"), mdx(\"p\", null, \"At\\xE9 agora o browser calculou quais n\\xF3s devem ser vis\\xEDveis e processou seus estilos. O browser precisa agora calcular a posi\\xE7\\xE3o e o tamanho que ir\\xE1 ocupar no \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"viewport\"), \" (espa\\xE7o dispon\\xEDvel do dispositivo), essa fase \\xE9 o \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"layout\"), \", tamb\\xE9m conhecida como \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"reflow\"), \".\"), mdx(\"p\", null, \"Para calcular a posi\\xE7\\xE3o e o tamanho exato de cada elemento, o browser analisa a \\xE1rvore de renderiza\\xE7\\xE3o passando por toda ela a partir de sua raiz. Vamos analisar esse simples exemplo:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"<html>\\n  <head>\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\" />\\n    <title>Critial Path: Hello world!</title>\\n  </head>\\n  <body>\\n    <div style=\\\"width: 50%\\\">\\n      <div style=\\\"width: 50%\\\">Hello world!</div>\\n    </div>\\n  </body>\\n</html>\\n\")), mdx(\"p\", null, \"O \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HTML\"), \" acima possu\\xED dois divs aninhados. O primeiro (pai) define o tamanho do elemento na tela como 50% da largura da janela do dispositivo (\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"viewport\"), \"). O segundo div (filho) define sua largura como 50% do seu pai, ou seja, 25% da largura do \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"viewport\"), \".\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/layout-viewport.png\",\n    \"alt\": \"Layout viewport\",\n    \"title\": \"Layout viewport\"\n  })), mdx(\"p\", null, \"O resultado da renderiza\\xE7\\xE3o \\xE9 em modelo de caixa, ou seja, todos elementos s\\xE3o ret\\xE2ngulos. Todas as medidas relativas, como porcentagens, \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"em\\u2019s\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"rem\\u2019s\"), \", etc s\\xE3o convertidas em pixels absolutos na tela.\"), mdx(\"p\", null, \"Agora que o browser possui todos os n\\xF3s vis\\xEDveis, seus estilos aplicados e sua geometria, finalmente chega a \\xFAltima fase, essa etapa \\xE9 chamada de \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Paint\"), \".\"), mdx(\"h3\", null, \"Paint\"), mdx(\"p\", null, \"O paint \\xE9 o processo que o browser executa para aplicar cada n\\xF3 da \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"\\xE1rvore de renderiza\\xE7\\xE3o\"), \" em pixeis reais na tela do dispositivo do usu\\xE1rio.\\nAssim como os outros processos, no \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"DevTools\"), \" do \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Chrome\"), \", tamb\\xE9m \\xE9 poss\\xEDvel examinar o tempo necess\\xE1rio para a fase de \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Layout\"), \" e \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Paint\"), \".\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/paint-timeline.png\",\n    \"alt\": \"Layout Timeline\",\n    \"title\": \"Layout Timeline\"\n  })), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"O evento \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"layout\"), \" captura exibe o tempo e a quantidade de n\\xF3s que foram constru\\xEDdos, posicionados e tiveram seu tamanho calculado a partir da \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"\\xE1rvore de renderiza\\xE7\\xE3o\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Assim que o layout termina, o browser emite eventos de \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Paint setup\"), \" e \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Paint\"), \", esses eventos convertem a \\xE1rvore de renderiza\\xE7\\xE3o em pixeis na tela.\")), mdx(\"p\", null, \"O tempo nececss\\xE1rio para executar essa renderiza\\xE7\\xE3o varia de acordo com a quantidade de elementos que temos em nosso \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"HTML\"), \", da complexidade do \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"CSS\"), \" e do tamanho do viewport do dispositivo. Quanto maior o HTML, maior trabalho para o navegador. Quanto mais complexo o estilo, mais tempo \\xE9 necess\\xE1rio na etapa de \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Paint\"), \". Fazer a renderiza\\xE7\\xE3o de uma cor s\\xF3lida (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#000\"), \") \\xE9 pouco custosa, por\\xE9m, a renderiza\\xE7\\xE3o de uma sombra (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"box-shadow\"), \") \\xE9 bem mais complexa e custosa.\"), mdx(\"p\", null, \"E com isso descobrimos todo o trabalho que o browser necessita realizar para renderizar nossa p\\xE1gina na tela do usu\\xE1rio. No pr\\xF3ximo post veremos o que gera o famoso \\u201CBloqueio de renderiza\\xE7\\xE3o\\u201D ou \\u201CBloqueio do caminho crit\\xEDco de renderiza\\xE7\\xE3o\\u201D e como podemos com medidas simples, solucionar isso.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Todas imagens foram retiradas do \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://developers.google.com/\",\n    \"title\": \"Google Developers\"\n  }, \"Google Developers\"))));\n}\n;\nMDXContent.isMDXComponent = true;"}}},
    "staticQueryHashes": ["3128451518"]}