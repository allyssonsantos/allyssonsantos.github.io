{
    "componentChunkName": "component---src-templates-blog-post-jsx",
    "path": "/blog/arrow-functions/",
    "result": {"data":{"site":{"siteMetadata":{"title":"allysson.me","author":"Allysson Santos"}},"mdx":{"id":"7c9153ab-6780-5b4a-b0bb-9c08d1c45002","slug":"arrow-functions/","frontmatter":{"title":"Arrow Functions","date":"18/12/2016","description":"Qual a diferença de arrow function para uma function \"padrão\"?","img":null},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Arrow Functions\",\n  \"slug\": \"/arrow-functions\",\n  \"description\": \"Qual a diferença de arrow function para uma function \\\"padrão\\\"?\",\n  \"date\": \"2016-12-18\",\n  \"tags\": [\"Javascript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Introdu\\xE7\\xE3o\"), mdx(\"p\", null, \"Arrow function \\xE9 uma nova forma de se escrever \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"fun\\xE7\\xF5es anonimas\"), \", vamos\\nentender sua sintaxe e como funciona o seu valor de \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"this\"), \".\"), mdx(\"h3\", null, \"Sintaxe\"), mdx(\"p\", null, \"Uma fun\\xE7\\xE3o anonima no ES5 era assim:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const countries = ['Germany', 'United States'];\\n\\nconst go = countries.map(function(country) {\\n  return 'One day I will go to ' + country;\\n});\\n\\nconsole.log(go);\\n\\n> [\\\"One day I will go to Germany\\\", \\\"One day I will go to United States\\\"]\\n\")), mdx(\"p\", null, \"Com as arrows functions, podemos simplifica-las das seguintes formas:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const contries = ['Germany', 'United States'];\\nconst go = countries.map(country => {\\n  return 'One day I will go to ' + country;\\n}); // Podemos tirar a palavra function e adicionar uma => a frente dos () dos parametros.\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const go = countries.map(country => {\\n  return 'One day I will go to ' + country;\\n}); // Caso a fun\\xE7\\xE3o tenha apenas um par\\xE2metro, podemos retirar o seus par\\xEAnteses.\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const go = countries.map(country => 'One day I will go to ' + country);\\n/* Caso a fun\\xE7\\xE3o tenha apenas um par\\xE2metro e retorne logo na primeira linha,\\npodemos escrever sem as chaves e sem a palavra return */\\n\\n/* Podemos usar tamb\\xE9m as template strings, ficando assim: */\\n\\nconst go = countries.map(country => `One day I will go to ${country}`);\\n\")), mdx(\"p\", null, \"Recapitulando:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Podemos tirar a palavra function e adicionar uma seta \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"=>\"), \" em frente os\\npar\\xEAnteses dos par\\xE2metros.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Se a sua fun\\xE7\\xE3o anonima tiver apenas um par\\xE2metro, pode \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"retirar\"), \" seus\\npar\\xEAnteses.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Se a fun\\xE7\\xE3o n\\xE3o tiver par\\xE2metros, podemos deixar \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"()\"), \" vazio mesmo.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Se a fun\\xE7\\xE3o der um \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"return\"), \" na primeira linha, podemos escrever apenas em uma\\nlinha, sem chaves e sem a palavra \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"return\"), \".\")), mdx(\"h3\", null, \"Objeto this\"), mdx(\"p\", null, \"O \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"this\"), \" dentro de uma \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"arrow function\"), \" se comporta de uma maneira\\ndiferente da que estamos acostumados, primeiro, vamos analisar um c\\xF3digo\\njs \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"sem uso de arrow functions\"), \".\"), mdx(\"p\", null, \"Imagine que temos o seguinte HTML e JS:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"<html>\\n  <body>\\n    <button id=\\\"btn\\\">Click!</button>\\n  </body>\\n  <script>\\n    const btn = document.getElementById('btn');\\n\\n    btn.addEventListener('click', function() {\\n      console.log(this);\\n    });\\n  </script>\\n</html>\\n\")), mdx(\"p\", null, \"Na fun\\xE7\\xE3o acima, ao clicar no bot\\xE3o com \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id='btn'\"), \" iremos logar o valor de\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"this\"), \", que nesse caso \\xE9 o pr\\xF3prio bot\\xE3o. Teremos como sa\\xEDda essa resposta:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"<button id=\\\"btn\\\">Click</button>\\n\")), mdx(\"p\", null, \"Se esse mesmo c\\xF3digo for escrito com \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"arrow function\"), \" o resultado n\\xE3o ser\\xE1 o\\nmesmo, pois o valor de \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"this\"), \" n\\xE3o est\\xE1 referenciado ao bot\\xE3o que est\\xE1\\nacontecendo a a\\xE7\\xE3o, ele est\\xE1 referenciado a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"todo o contexto\"), \" que a fun\\xE7\\xE3o\\nest\\xE1 inserida, no nosso caso, o contexto \\xE9 a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"window\"), \".\"), mdx(\"p\", null, \"Ao clicar no bot\\xE3o com uma \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"arrow function\"), \", teremos o seguinte retorno:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"<html>\\n  <body>\\n    <button id=\\\"btn\\\">Click!</button>\\n  </body>\\n  <script>\\n    const btn = document.getElementById('btn');\\n\\n    btn.addEventListener('click', () => {\\n      // mudan\\xE7a aqui /\\\\\\n      console.log(this);\\n    });\\n  </script>\\n</html>\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"> Window {speechSynthesis: SpeechSynthesis, caches: CacheStorage, localStorage: Storage\\n> sessionStorage: Storage, webkitStorageInfo: DeprecatedStorageInfo\\u2026}\\n\")), mdx(\"p\", null, \"Agora um outro exemplo para tentar fixar melhor, temos a seguinte estrutura sem\\no uso de arrow functions ainda:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"<html>\\n  <body>\\n    <button id=\\\"btn\\\">Click!</button>\\n  </body>\\n  <script>\\n    const pessoa = {\\n      nome: 'Allysson',\\n      idade: '22',\\n\\n      apresentar: function() {\\n        return `Meu nome e ${this.nome} e eu tenho ${this.idade} anos`;\\n      },\\n\\n      falar: function() {\\n        const self = this;\\n        window.setTimeout(function() {\\n          console.log(self.apresentar());\\n        }, 500);\\n      },\\n    };\\n\\n    const btn = document.getElementById('btn');\\n\\n    btn.addEventListener('click', function() {\\n      pessoa.falar();\\n    });\\n  </script>\\n</html>\\n\")), mdx(\"p\", null, \"Repare que na linha 15 precisamos \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"guardar o valor de this\"), \" na vari\\xE1vel \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"self\"), \"\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"(nesse moemento o valor de this \\xE9 o pr\\xF3prio objeto pessoa)\"), \", se us\\xE1ssemos\\ndiretamente o \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"this\"), \" dentro do \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"console.log\"), \" que est\\xE1 no \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setTimeout\"), \"\\nacabar\\xEDamos nos refer\\xEAnciando a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"window\"), \", e dentro da \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"window\"), \" n\\xE3o possu\\xEDmos\\na fun\\xE7\\xE3o falar, ela est\\xE1 dentro de \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pessoa\"), \".\"), mdx(\"p\", null, \"Executando esse JS temos o seguinte log no console:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"> Meu nome e Allysson e eu tenho 22 anos\\n\")), mdx(\"h4\", null, \"Usando arrow functions\"), mdx(\"p\", null, \"Agora se n\\xF3s mudarmos a fun\\xE7\\xE3o anonima que est\\xE1 dentro do \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setTimeout\"), \" para\\nutilizar \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"arrow function\"), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"n\\xE3o precisaremos guardar o valor de this\"), \" dentro\\nde \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"self\"), \", pois como \\xE9 uma \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"arrow function\"), \", o contexto de this j\\xE1 \\xE9 o objeto\\npessoa, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"o escopo se mant\\xE9m o mesmo\"), \"!\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"<html>\\n  <body>\\n    <button id=\\\"btn\\\">Click!</button>\\n  </body>\\n  <script>\\n    const pessoa = {\\n      nome: 'Allysson',\\n      idade: '22',\\n\\n      apresentar: function() {\\n        return `Meu nome e ${this.nome} e eu tenho ${this.idade} anos`;\\n      },\\n\\n      falar: function() {\\n        window.setTimeout(() => {\\n          console.log(this.apresentar());\\n        }, 500);\\n      },\\n    };\\n\\n    const btn = document.getElementById('btn');\\n\\n    btn.addEventListener('click', function() {\\n      pessoa.falar();\\n    });\\n  </script>\\n</html>\\n\")), mdx(\"p\", null, \"Temos como retorno o mesmo que na fun\\xE7\\xE3o anterior, mas agora \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"sem precisar do\\nself\"), \"!\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"> Meu nome e Allysson e eu tenho 22 anos\\n\")), mdx(\"h2\", null, \"Conclus\\xE3o\"), mdx(\"p\", null, \"O valor de this com arrow functions pode gerar grandes dores de cabe\\xE7a, esteja\\natento, fa\\xE7a testes, pratique criando fun\\xE7\\xF5es anonimas convencionais e logue o\\nvalor de this, fa\\xE7a essa mesma fun\\xE7\\xE3o utilizando arrow functions e compare o\\nvalor de this, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"saiba que o escopo se mantem o mesmo de onde a arrow function\\nfoi criada\"), \"!\"), mdx(\"p\", null, \"Ela \\xE9 muito boa para ocasi\\xF5es como no objeto pessoa, mas n\\xE3o parece ser muito\\ninteressante quando queremos adicionar um event listener em algum elemento, pois\\nestariamos alterando o escopo, o contexto. Nosso event listener n\\xE3o teria o\\nefeito desejado.\"));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"depth":2,"value":"Introdução"},{"depth":2,"value":"Conclusão"}]}},"pageContext":{"slug":"/arrow-functions/"}},
    "staticQueryHashes": ["3128451518"]}