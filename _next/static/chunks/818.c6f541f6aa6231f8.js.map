{"version":3,"file":"static/chunks/818.c6f541f6aa6231f8.js","mappings":"4aAAAA,CAAAA,EAAOC,OAAO,CAAG,CACfC,MAAOC,CAAAA,EACPC,KAAM,CACJC,cAAe,KACfC,QAAS,CAAC,KAAM,KAAK,EAEvBC,kBAAmBJ,CAAAA,CACrB,w9qCIG4B,KAAIK,EAAS,2CCFzC,IAAMC,EAAc,CAClBC,GAAI,CACFC,KAAM,UACNC,KAAM,0BACR,EACAC,GAAI,CACFF,KAAM,eACNC,KAAM,0BACR,CACF,EAEO,SAASE,IAGd,IAAMC,EAASC,CAAAA,EAAAA,EAAAA,SAAAA,IACTC,EAAgBF,EAAOG,KAAK,CAACC,MAAM,CACnC,CAACC,EAAgBC,EAAkB,CAAGC,CAAAA,EAAAA,EAAAA,QAAAA,EAASL,GAAiB,MAEhEM,EAAUR,EAAOS,MAAM,CAACC,KAAK,CAAC,SAE9BC,EAAaH,EAAQI,MAAM,CAAG,GAAKJ,KAAAA,CAAO,CAAC,EAAE,CAkBnD,MACE,GAAAK,EAAAC,GAAA,EAACC,SAAAA,CACCC,UAAWC,GAAAA,CAAAA,oBAA2B,CACtCC,SAnBJ,SAAsBC,CAA2C,EAC/D,IAAMC,EAAgBD,EAAME,MAAM,CAACC,KAAK,CAGxC,GAFAhB,EAAkBc,GAEdA,OAAAA,EAAwB,CAC1B,IAAMG,EAAQ,IAAIC,OAAO,GAAiBC,MAAA,CAAdvB,EAAc,OAC1CF,EAAO0B,IAAI,CAAC,GAAoCD,MAAA,CAAjCzB,EAAOS,MAAM,CAACkB,OAAO,CAACJ,EAAO,MAC5C,MACF,CAEA,GAAI,CAACrB,EAAe,CAClBF,EAAO0B,IAAI,CAAC,IAAoB1B,MAAAA,CAAhBoB,GAA8BK,MAAA,CAAdzB,EAAOS,MAAM,GAC7C,MACF,CACF,EAMIa,MAAOjB,WAENuB,IAAAA,IAAsB,CAACrC,OAAO,CAACsC,GAAG,CAAC,GAClC,GAAAhB,EAAAiB,IAAA,EAACC,SAAAA,CAECT,MAAOlB,EACP4B,SAAUrB,GAAc,CAACsB,EAAMC,IAAI,CAAC,GAAUC,EAAK/B,MAAM,GAAKA,aAE7DV,CAAW,CAACU,EAAmC,CAACP,IAAI,CAAE,IACtDH,CAAW,CAACU,EAAmC,CAACR,IAAI,GALhDQ,KAUf,oBC/DAnB,EAAAC,OAAA,EAAkB","sources":["webpack://_N_E/./next-i18next.config.js","webpack://_N_E/./node_modules/@contentlayer2/client/dist/guards.js","webpack://_N_E/./node_modules/@contentlayer2/client/dist/index.js","webpack://_N_E/./node_modules/contentlayer2/dist/client/index.js","webpack://_N_E/./.contentlayer/generated/index.mjs","webpack://_N_E/./src/components/language-switcher/language-switcher.tsx","webpack://_N_E/./src/components/language-switcher/language-switcher.module.css"],"sourcesContent":["module.exports = {\n  debug: process.env.NODE_ENV === 'development',\n  i18n: {\n    defaultLocale: 'pt',\n    locales: ['en', 'pt'],\n  },\n  reloadOnPrerender: process.env.NODE_ENV === 'development',\n};\n","function is(typeName, _) {\n    if (_) {\n        if (Array.isArray(typeName)) {\n            // TODO make type field name dynamic (probably will require to code-gen the guard function)\n            return typeName.some((typeName_) => _?.type === typeName_);\n        }\n        else {\n            return typeName === _?.type;\n        }\n    }\n    else {\n        return (_) => is(typeName, _);\n    }\n}\nexport const isType = is;\nexport const guards = {\n    is,\n    // isType,\n    // hasAllFields,\n    // allFields,\n    hasField,\n    // withField,\n};\nfunction hasField(_, property) {\n    return _.hasOwnProperty(property);\n}\n//# sourceMappingURL=guards.js.map","export * from './guards.js';\nexport * from './utils.js';\n//# sourceMappingURL=index.js.map","export * from '@contentlayer2/client';\n//# sourceMappingURL=index.js.map","// NOTE This file is auto-generated by Contentlayer\n\nexport { isType } from 'contentlayer2/client'\n\n// NOTE During development Contentlayer imports from `.mjs` files to improve HMR speeds.\n// During (production) builds Contentlayer it imports from `.json` files to improve build performance.\nimport allBlogs from './Blog/_index.json' assert { type: 'json' }\n\nexport { allBlogs }\n\nexport const allDocuments = [...allBlogs]\n\n\n","import type React from 'react';\nimport { useState } from 'react';\nimport { useRouter } from 'next/router';\nimport { allBlogs } from 'contentlayer/generated';\n\nimport nextI18nextConfig from 'next-i18next.config';\nimport styles from './language-switcher.module.css';\n\nconst languageMap = {\n  en: {\n    name: 'English',\n    flag: 'ðŸ‡ºðŸ‡¸',\n  },\n  pt: {\n    name: 'PortuguÃªs',\n    flag: 'ðŸ‡§ðŸ‡·',\n  },\n};\n\nexport function LanguageSwitcher() {\n  const posts = allBlogs;\n\n  const router = useRouter();\n  const currentLocale = router.query.locale;\n  const [selectedLocale, setSelectedLocale] = useState(currentLocale || 'pt');\n\n  const splited = router.asPath.split('/blog');\n\n  const isBlogPage = splited.length > 1 && splited[1] !== '';\n\n  function handleChange(event: React.ChangeEvent<HTMLSelectElement>) {\n    const choosedLocale = event.target.value;\n    setSelectedLocale(choosedLocale);\n\n    if (choosedLocale === 'pt') {\n      const regex = new RegExp(`${currentLocale}/?`);\n      router.push(`${router.asPath.replace(regex, '')}`);\n      return;\n    }\n\n    if (!currentLocale) {\n      router.push(`/${choosedLocale}${router.asPath}`);\n      return;\n    }\n  }\n\n  return (\n    <select\n      className={styles['language-switcher']}\n      onChange={handleChange}\n      value={selectedLocale}\n    >\n      {nextI18nextConfig.i18n.locales.map((locale) => (\n        <option\n          key={locale}\n          value={locale}\n          disabled={isBlogPage && !posts.some((post) => post.locale === locale)}\n        >\n          {languageMap[locale as keyof typeof languageMap].flag}{' '}\n          {languageMap[locale as keyof typeof languageMap].name}\n        </option>\n      ))}\n    </select>\n  );\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"language-switcher\":\"language-switcher_language-switcher__P6Kmg\"};"],"names":["module","exports","debug","process","i18n","defaultLocale","locales","reloadOnPrerender","allBlogs","languageMap","en","name","flag","pt","LanguageSwitcher","router","useRouter","currentLocale","query","locale","selectedLocale","setSelectedLocale","useState","splited","asPath","split","isBlogPage","length","jsx_runtime","jsx","select","className","styles","onChange","event","choosedLocale","target","value","regex","RegExp","concat","push","replace","nextI18nextConfig","map","jsxs","option","disabled","posts","some","post"],"sourceRoot":""}